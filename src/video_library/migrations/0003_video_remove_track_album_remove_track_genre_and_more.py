# Generated by Django 4.0 on 2021-12-29 10:39

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import src.base.services


class Migration(migrations.Migration):

    dependencies = [
        ('oauth', '0001_initial'),
        ('video_library', '0002_track_cover_track_private'),
    ]

    operations = [
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('link_of_author', models.CharField(blank=True, max_length=500, null=True)),
                ('file', models.FileField(upload_to=src.base.services.get_path_upload_video, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['mp3', 'wav'])])),
                ('create_at', models.DateTimeField(auto_now_add=True)),
                ('plays_count', models.PositiveIntegerField(default=0)),
                ('download', models.PositiveIntegerField(default=0)),
                ('likes_count', models.PositiveIntegerField(default=0)),
                ('private', models.BooleanField(default=False)),
                ('cover', models.ImageField(blank=True, null=True, upload_to=src.base.services.get_path_upload_cover_video, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg']), src.base.services.validate_size_image])),
                ('genre', models.ManyToManyField(related_name='track_genres', to='video_library.Genre')),
                ('license', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='license_tracks', to='video_library.license')),
            ],
        ),
        migrations.RemoveField(
            model_name='track',
            name='album',
        ),
        migrations.RemoveField(
            model_name='track',
            name='genre',
        ),
        migrations.RemoveField(
            model_name='track',
            name='license',
        ),
        migrations.RemoveField(
            model_name='track',
            name='user',
        ),
        migrations.RemoveField(
            model_name='track',
            name='user_of_likes',
        ),
        migrations.RemoveField(
            model_name='comment',
            name='track',
        ),
        migrations.RemoveField(
            model_name='playlist',
            name='tracks',
        ),
        migrations.AddField(
            model_name='playlist',
            name='description',
            field=models.TextField(blank=True, max_length=1000, null=True),
        ),
        migrations.AddField(
            model_name='playlist',
            name='private',
            field=models.BooleanField(default=False),
        ),
        migrations.DeleteModel(
            name='Album',
        ),
        migrations.DeleteModel(
            name='Track',
        ),
        migrations.AddField(
            model_name='video',
            name='playlist',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='video_library.playlist'),
        ),
        migrations.AddField(
            model_name='video',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tracks', to='oauth.authuser'),
        ),
        migrations.AddField(
            model_name='video',
            name='user_of_likes',
            field=models.ManyToManyField(related_name='likes_of_tracks', to='oauth.AuthUser'),
        ),
        migrations.AddField(
            model_name='comment',
            name='video',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='video_comments', to='video_library.video'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='playlist',
            name='videos',
            field=models.ManyToManyField(related_name='video_play_lists', to='video_library.Video'),
        ),
    ]
